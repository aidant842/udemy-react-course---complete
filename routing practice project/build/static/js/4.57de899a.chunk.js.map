{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","url"],"mappings":"mIAAA,mCAceA,IAXO,WAClB,OACI,sBAAKC,UAAWC,IAAQC,SAAxB,UACI,iDACA,cAAC,IAAD,CAAMC,GAAG,aAAaH,UAAU,MAAhC,8B,mBCNZI,EAAOC,QAAU,CAAC,SAAW,kC,mBCA7BD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,kC,yICsDXC,EA9CQ,SAACC,GACpB,IAAMC,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAErBC,EAAmBR,EAAnBQ,eAERC,qBAAU,WACS,cAAXH,GAA2BC,GAC3BC,MAEL,CAACF,EAAQC,EAAOC,IAEnB,IAAME,EAAoB,SAACC,GACvBA,EAAMC,iBAEN,IAAMC,EAAcZ,EAAea,QAAQC,MAI3CV,EAAY,CACRW,YAAa,CAAEC,KAAMJ,GACrBK,QAASlB,EAAMkB,UAGnBjB,EAAea,QAAQC,MAAQ,IAGnC,OACI,uBAAMtB,UAAWC,IAAQyB,KAAMC,SAAUV,EAAzC,UACgB,YAAXJ,GACG,qBAAKb,UAAU,WAAf,SACI,cAAC4B,EAAA,EAAD,MAGR,sBAAK5B,UAAWC,IAAQ4B,QAASF,SAAUV,EAA3C,UACI,uBAAOa,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKzB,OAEzC,qBAAKR,UAAWC,IAAQiC,QAAxB,SACI,wBAAQlC,UAAU,MAAlB,+B,iBCvCDmC,EARK,SAAC5B,GACnB,OACE,oBAAIP,UAAWC,IAAQmC,KAAvB,SACE,4BAAI7B,EAAMiB,U,iBCQDa,EAVM,SAAC9B,GACpB,OACE,oBAAIP,UAAWC,IAAQqC,SAAvB,SACG/B,EAAM+B,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BhB,KAAMgB,EAAQhB,MAA1BgB,EAAQT,UCiEnBU,EA7DE,WACb,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEQnB,EADOoB,cACPpB,QACR,EAIIf,YAAQoC,KAHRlC,EADJ,EACIA,YACAC,EAFJ,EAEIA,OACMkC,EAHV,EAGIC,KAGJhC,qBAAU,WACNJ,EAAYa,KACb,CAACb,EAAaa,IAEjB,IAQIa,EAJEW,EAAsBC,uBAAY,WACpCtC,EAAYa,KACb,CAACb,EAAaa,IAsBjB,MAlBe,YAAXZ,IACAyB,EACI,qBAAKtC,UAAU,WAAf,SACI,cAAC4B,EAAA,EAAD,OAKG,cAAXf,GAA0BkC,GAAkBA,EAAeI,OAAS,IACpEb,EAAW,cAAC,EAAD,CAAcA,SAAUS,KAGxB,cAAXlC,GACEkC,GAA4C,IAA1BA,EAAeI,SAEnCb,EAAW,mBAAGtC,UAAU,WAAb,0CAIX,0BAASA,UAAWC,IAAQqC,SAA5B,UACI,gDACEK,GACE,wBAAQ3C,UAAU,MAAMoD,QAhCL,WAC3BR,GAAmB,IA+BX,2BAIHD,GACG,cAAC,EAAD,CACIlB,QAASA,EACTV,eAAgBkC,IAGvBX,M,iBCxDEe,EATU,SAAC9C,GACxB,OACE,yBAAQP,UAAWC,IAAQqD,MAA3B,UACE,4BAAI/C,EAAMiB,OACV,qCAAajB,EAAMgD,a,QC0DVC,UArDK,WAChB,IAAMC,EAAQC,cAGNjC,EAFOoB,cAEPpB,QAER,EAKIf,YAAQiD,KAAgB,GAJxB/C,EADJ,EACIA,YACAC,EAFJ,EAEIA,OACM+C,EAHV,EAGIZ,KAHJ,EAIIlC,MAOJ,OAJAE,qBAAU,WACNJ,EAAYa,KACb,CAACb,EAAaa,IAEF,YAAXZ,EAEI,qBAAKb,UAAU,WAAf,SACI,cAAC4B,EAAA,EAAD,MASPgC,EAAYpC,KAKb,qCACI,cAAC,EAAD,CACIA,KAAMoC,EAAYpC,KAClB+B,OAAQK,EAAYL,SAExB,cAAC,IAAD,CAAOM,KAAMJ,EAAMI,KAAMC,OAAK,EAA9B,SACI,qBAAK9D,UAAU,WAAf,SACI,cAAC,IAAD,CAAMA,UAAU,YAAYG,GAAE,UAAKsD,EAAMM,IAAX,aAA9B,+BAKR,cAAC,IAAD,CAAOF,KAAI,UAAKJ,EAAMI,KAAX,aAAX,SACI,cAAC,EAAD,SAjBD,cAAC9D,EAAA,EAAD","file":"static/js/4.57de899a.chunk.js","sourcesContent":["import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NoQuotesFound = () => {\n    return (\n        <div className={classes.noquotes}>\n            <p>No quotes found!</p>\n            <Link to=\"/new-quote\" className=\"btn\">\n                Add a Quote\n            </Link>\n        </div>\n    );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__N1Z5-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2I8Y1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__YP9NU\",\"loading\":\"NewCommentForm_loading__2gq-7\",\"control\":\"NewCommentForm_control__1XKVb\",\"actions\":\"NewCommentForm_actions__1KDmh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__itK5-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2_5C1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3i_I8\"};","import { useRef, useEffect } from \"react\";\n//Hooks\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\n//Css\nimport classes from \"./NewCommentForm.module.css\";\n//Components\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n    const commentTextRef = useRef();\n\n    const { sendRequest, status, error } = useHttp(addComment);\n\n    const { onAddedComment } = props;\n\n    useEffect(() => {\n        if (status === \"completed\" && !error) {\n            onAddedComment();\n        }\n    }, [status, error, onAddedComment]);\n\n    const submitFormHandler = (event) => {\n        event.preventDefault();\n\n        const enteredText = commentTextRef.current.value;\n\n        // optional: Could validate here\n\n        sendRequest({\n            commentData: { text: enteredText },\n            quoteId: props.quoteId,\n        });\n\n        commentTextRef.current.value = \"\";\n    };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === \"pending\" && (\n                <div className=\"centered\">\n                    <LoadingSpinner />\n                </div>\n            )}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor=\"comment\">Your Comment</label>\n                <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className=\"btn\">Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const params = useParams();\n    const { quoteId } = params;\n    const {\n        sendRequest,\n        status,\n        data: loadedComments,\n    } = useHttp(getAllComments);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n\n    const addedCommentHandler = useCallback(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    let comments;\n\n    if (status === \"pending\") {\n        comments = (\n            <div className=\"centered\">\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n        comments = <CommentsList comments={loadedComments} />;\n    }\n    if (\n        status === \"completed\" &&\n        (!loadedComments || loadedComments.length === 0)\n    ) {\n        comments = <p className=\"centered\">No comments were added yet!</p>;\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className=\"btn\" onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && (\n                <NewCommentForm\n                    quoteId={quoteId}\n                    onAddedComment={addedCommentHandler}\n                />\n            )}\n            {comments}\n        </section>\n    );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\n//Components\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n//Hooks\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetail = () => {\r\n    const match = useRouteMatch();\r\n    const params = useParams();\r\n\r\n    const { quoteId } = params;\r\n\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data: loadedQuote,\r\n        error,\r\n    } = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if (status === \"pending\") {\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        <p className=\"centered\">{error}</p>;\r\n    }\r\n\r\n    if (!loadedQuote.text) {\r\n        return <NoQuotesFound />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HighlightedQuote\r\n                text={loadedQuote.text}\r\n                author={loadedQuote.author}\r\n            />\r\n            <Route path={match.path} exact>\r\n                <div className=\"centered\">\r\n                    <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}