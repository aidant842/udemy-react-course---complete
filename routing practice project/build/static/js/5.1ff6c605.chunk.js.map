{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","QuoteItem","props","item","text","author","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAsc","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"mIAAA,mCAceA,IAXO,WAClB,OACI,sBAAKC,UAAWC,IAAQC,SAAxB,UACI,iDACA,cAAC,IAAD,CAAMC,GAAG,aAAaH,UAAU,MAAhC,8B,mBCNZI,EAAOC,QAAU,CAAC,SAAW,kC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,gGCkB5CC,EAhBG,SAACC,GACf,OACI,qBAAIP,UAAWC,IAAQO,KAAvB,UACI,mCACI,qCACI,4BAAID,EAAME,SAEd,qCAAaF,EAAMG,YAEvB,cAAC,IAAD,CAAMP,GAAE,kBAAaI,EAAMI,IAAMX,UAAU,MAA3C,iC,iBCyCGY,EArCG,SAACL,GACf,IAXgBM,EAAQC,EAWlBC,EAAUC,cACVC,EAAWC,cAIXC,EAA2C,QAF7B,IAAIC,gBAAgBH,EAASI,QAEhBC,IAAI,QAE/BC,GAlBUV,EAkBgBN,EAAMM,OAlBdC,EAkBsBK,EAjBvCN,EAAOW,MAAK,SAACC,EAAQC,GACxB,OAAIZ,EACOW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAqB5C,OACI,eAAC,WAAD,WACI,qBAAKX,UAAWC,IAAQ0B,QAAxB,SACI,yBAAQC,QATS,WACzBb,EAAQc,KAAR,UACOZ,EAASa,SADhB,iBACiCX,EAAe,OAAS,SAOjD,kBACUA,EAAe,aAAe,iBAG5C,oBAAInB,UAAWC,IAAQ8B,KAAvB,SACKR,EAAaS,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CAEItB,GAAIsB,EAAMtB,GACVD,OAAQuB,EAAMvB,OACdD,KAAMwB,EAAMxB,MAHPwB,EAAMtB,a,wBCDpBuB,UAlCG,WACd,MAKIC,YAAQC,KAAc,GAJtBC,EADJ,EACIA,YACAC,EAFJ,EAEIA,OACMC,EAHV,EAGIC,KACAC,EAJJ,EAIIA,MAOJ,OAJAC,qBAAU,WACNL,MACD,CAACA,IAEW,YAAXC,EAEI,qBAAKtC,UAAU,WAAf,SACI,cAAC2C,EAAA,EAAD,MAKRF,EACO,mBAAGzC,UAAU,mBAAb,SAAiCyC,IAI7B,cAAXH,GACEC,GAAwC,IAAxBA,EAAaK,OAK5B,cAAC,EAAD,CAAW/B,OAAQ0B,IAHf,cAACxC,EAAA,EAAD","file":"static/js/5.1ff6c605.chunk.js","sourcesContent":["import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NoQuotesFound = () => {\n    return (\n        <div className={classes.noquotes}>\n            <p>No quotes found!</p>\n            <Link to=\"/new-quote\" className=\"btn\">\n                Add a Quote\n            </Link>\n        </div>\n    );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__N1Z5-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__31HMF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__2HwqB\",\"sorting\":\"QuoteList_sorting__lwvcU\"};","import { Link } from \"react-router-dom\";\nimport classes from \"./QuoteItem.module.css\";\n\nconst QuoteItem = (props) => {\n    return (\n        <li className={classes.item}>\n            <figure>\n                <blockquote>\n                    <p>{props.text}</p>\n                </blockquote>\n                <figcaption>{props.author}</figcaption>\n            </figure>\n            <Link to={`/quotes/${props.id}`} className=\"btn\">\n                View Fullscreen\n            </Link>\n        </li>\n    );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n        if (ascending) {\n            return quoteA.id > quoteB.id ? 1 : -1;\n        } else {\n            return quoteA.id < quoteB.id ? 1 : -1;\n        }\n    });\n};\n\nconst QuoteList = (props) => {\n    const history = useHistory();\n    const location = useLocation();\n\n    const queryParams = new URLSearchParams(location.search);\n\n    const isSortingAsc = queryParams.get(\"sort\") === \"asc\";\n\n    const sortedQuotes = sortQuotes(props.quotes, isSortingAsc);\n\n    const changeSortingHandler = () => {\n        history.push(\n            `${location.pathname}?sort=${isSortingAsc ? \"desc\" : \"asc\"}`\n        );\n    };\n\n    return (\n        <Fragment>\n            <div className={classes.sorting}>\n                <button onClick={changeSortingHandler}>\n                    Sort {isSortingAsc ? \"Descending\" : \"Ascending\"}\n                </button>\n            </div>\n            <ul className={classes.list}>\n                {sortedQuotes.map((quote) => (\n                    <QuoteItem\n                        key={quote.id}\n                        id={quote.id}\n                        author={quote.author}\n                        text={quote.text}\n                    />\n                ))}\n            </ul>\n        </Fragment>\n    );\n};\n\nexport default QuoteList;\n","import { useEffect } from \"react\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\n\r\nconst AllQuotes = () => {\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data: loadedQuotes,\r\n        error,\r\n    } = useHttp(getAllQuotes, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest();\r\n    }, [sendRequest]);\r\n\r\n    if (status === \"pending\") {\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return <p className=\"centered focused\">{error}</p>;\r\n    }\r\n\r\n    if (\r\n        status === \"completed\" &&\r\n        (!loadedQuotes || loadedQuotes.length === 0)\r\n    ) {\r\n        return <NoQuotesFound />;\r\n    }\r\n\r\n    return <QuoteList quotes={loadedQuotes} />;\r\n};\r\n\r\nexport default AllQuotes;\r\n"],"sourceRoot":""}